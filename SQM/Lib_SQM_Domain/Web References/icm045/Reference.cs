//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Lib_SQM_Domain.icm045 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CMSHandlerSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class CMSHandler : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MailSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultQueryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CMSHandler() {
            this.Url = global::Lib_SQM_Domain.Properties.Settings.Default.Lib_SQM_Domain_icm045_CMSHandler;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MailSendCompletedEventHandler MailSendCompleted;
        
        /// <remarks/>
        public event ResultQueryCompletedEventHandler ResultQueryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MailSend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MailSend(string AppID, string From, string To, string Cc, string Bcc, string Subject, string Body, MailPriority Priority, MailFormat BodyFormat, object[] Attachments) {
            object[] results = this.Invoke("MailSend", new object[] {
                        AppID,
                        From,
                        To,
                        Cc,
                        Bcc,
                        Subject,
                        Body,
                        Priority,
                        BodyFormat,
                        Attachments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MailSendAsync(string AppID, string From, string To, string Cc, string Bcc, string Subject, string Body, MailPriority Priority, MailFormat BodyFormat, object[] Attachments) {
            this.MailSendAsync(AppID, From, To, Cc, Bcc, Subject, Body, Priority, BodyFormat, Attachments, null);
        }
        
        /// <remarks/>
        public void MailSendAsync(string AppID, string From, string To, string Cc, string Bcc, string Subject, string Body, MailPriority Priority, MailFormat BodyFormat, object[] Attachments, object userState) {
            if ((this.MailSendOperationCompleted == null)) {
                this.MailSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailSendOperationCompleted);
            }
            this.InvokeAsync("MailSend", new object[] {
                        AppID,
                        From,
                        To,
                        Cc,
                        Bcc,
                        Subject,
                        Body,
                        Priority,
                        BodyFormat,
                        Attachments}, this.MailSendOperationCompleted, userState);
        }
        
        private void OnMailSendOperationCompleted(object arg) {
            if ((this.MailSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailSendCompleted(this, new MailSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResultQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResultQuery(string AppID, string Ticket) {
            object[] results = this.Invoke("ResultQuery", new object[] {
                        AppID,
                        Ticket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResultQueryAsync(string AppID, string Ticket) {
            this.ResultQueryAsync(AppID, Ticket, null);
        }
        
        /// <remarks/>
        public void ResultQueryAsync(string AppID, string Ticket, object userState) {
            if ((this.ResultQueryOperationCompleted == null)) {
                this.ResultQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultQueryOperationCompleted);
            }
            this.InvokeAsync("ResultQuery", new object[] {
                        AppID,
                        Ticket}, this.ResultQueryOperationCompleted, userState);
        }
        
        private void OnResultQueryOperationCompleted(object arg) {
            if ((this.ResultQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultQueryCompleted(this, new ResultQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum MailPriority {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum MailFormat {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Html,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MailSendCompletedEventHandler(object sender, MailSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ResultQueryCompletedEventHandler(object sender, ResultQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591